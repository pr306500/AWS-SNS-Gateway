let Promise = require('bluebird')
// let config = require('../examples/config');
let credentials, scopes,oauth2;
const microsoftGraph = require("@microsoft/microsoft-graph-client");
const resource = 'https://graph.microsoft.com/';
let RequestHelper = require('../helpers/requestHelper');

let request_helper = new RequestHelper();


class authHelper {
  /**
   * Generate a fully formed uri to use for authentication based on the supplied resource argument
   * @return {string} a fully formed uri with which authentication can be completed.
   */
   constructor(config){
     credentials = config.credentials;
     scopes = config.scopes;
     oauth2 = require('simple-oauth2').create(credentials);
   }

  getAuthUrl(url) {
    var returnVal = oauth2.authorizationCode.authorizeURL({
      redirect_uri: url,
      scope: scopes.join(' ')
    });
    return returnVal;
  }

  /**
   * Gets a token for a given resource.
   * @param {string} code An authorization code returned from a client.
   * @param {AcquireTokenCallback} callback The callback function.
   */
  getTokenFromCode(auth_code, url) {
    return new Promise((resolve, reject) => {
      let tokenConfig = {
        code: auth_code,
        redirect_uri: url || 'http://localhost/callback',
        scope: scopes.join(' ')
      };
      Promise.coroutine(function*() {
        let result = yield oauth2.authorizationCode.getToken(tokenConfig);
        const token = oauth2.accessToken.create(result);
        if (token) {
          resolve(token);
        } else {
          reject('error occurred')
        }
      })().catch(err => reject(err))
    })
  }

  getAccessToken(request, response) {
    let self = this;
    return new Promise((resolve, reject) => {
      Promise.coroutine(function*() {
        var expiration = new Date(parseFloat(self.getValueFromCookie('node-tutorial-token-expires', request.headers.cookie)));
        if (expiration <= new Date()) {
          console.log('TOKEN EXPIRED, REFRESHING');
          var refresh_token = self.getValueFromCookie('node-tutorial-refresh-token', request.headers.cookie);
          this.refreshAccessToken(refresh_token, function(error, newToken) {
            if (error) {
              reject(error);
            } else if (newToken) {
              var cookies = ['node-tutorial-token=' + newToken.token.access_token + ';Max-Age=4000',
                'node-tutorial-refresh-token=' + newToken.token.refresh_token + ';Max-Age=4000',
                'node-tutorial-token-expires=' + newToken.token.expires_at.getTime() + ';Max-Age=4000'
              ];
              response.setHeader('Set-Cookie', cookies);
              resolve(newToken.token.access_token);
            }
          });
        } else {
          // Return cached token
          var access_token = self.getValueFromCookie('node-tutorial-token', request.headers.cookie);
          resolve(access_token);
        }
      })().catch(err=> console.log(err));
    })
  }

  authorize( code , url) {
    return new Promise((resolve,reject)=>{
      let self = this;
      Promise.coroutine(function*(){
        console.log('Code: ' + code);
        let token = yield self.getTokenFromCode(code, url);
        let user_data = yield self.getUserEmail(token.token.access_token)
        let tokenData = {
          name: user_data.displayName,
          accessToken: token.token.access_token,
          refreshToken:token.token.refresh_token,
          tokenExpiry: token.token.expires_at,
          userId:user_data.id,
          email:user_data.userPrincipalName
        }
        resolve(tokenData);
      })().catch(err => reject(err))
    })
  }

  getValueFromCookie(valueName, cookie) {
    if (cookie && cookie.indexOf(valueName) !== -1) {
      var start = cookie.indexOf(valueName) + valueName.length + 1;
      var end = cookie.indexOf(';', start);
      end = end === -1 ? cookie.length : end;
      return cookie.substring(start, end);
    }
  }

  getUserEmail(token) {
    return new Promise((resolve,reject)=>{
      Promise.coroutine(function*(){
        let client = request_helper.getClient(token)
        let userEmail = yield client.api('/me').get();
        resolve(userEmail);
      })().catch((err)=> reject(err))
    })
  }

  refreshAccessToken(refreshToken, callback) {
    var tokenObj = oauth2.accessToken.create({
      refresh_token: refreshToken
    });
    tokenObj.refresh(callback);
  }
}
module.exports = authHelper;
